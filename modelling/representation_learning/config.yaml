# SparseAutoencoder_params : 
#   model_params: 
#     input_dim : 1280
#     hidden_dims : [768, 1024]
#     sparsity_lambda : 0.005
#     beta : 3
#     momentum : 0.9
#     activation : 'prelu'
#     norm_type : 'batchnorm'
#     sensor_id : 1
#     model_name : 'SparseAutoencoder'

training_params : 
  model_name : 'DenoisingSparseAE'
  save_dir : 'results'
  ckpt_file_name : '{epoch}-{val_HuberLoss:.3f}'
  BATCH_SIZE : 64
  MAX_EPOCHS : 100
  denoisingAE_lr : 1e-4
  sparseAE_lr : 1e-4
  activation_name : 'prelu'
  optimizer : 'adam'
  loss_fn : 'HuberLoss'
  weight_decay : !!float 1e-5
  GRAD_ACCUMULATION_STEPS : 2

callback_params: 
  ModelCheckpoint:
    monitor: 'val_HuberLoss'
    mode: 'min'
    save_top_k: 1
    save_last: True
  EarlyStopping:
    monitor: 'val_HuberLoss'
    mode: 'min'
    min_delta : 0.00005
    patience : 8

lr_scheduler_params : 
  scheduler_name: 'cosine_annealing_lr_scheduler'
  exponential_decay_lr_scheduler_params:
    gamma: 0.985

  cosine_annealing_lr_scheduler_params:
    T_max: 250
    eta_min: 1.0e-07

sensor_id: 1
seq_len: 1280

dataset_params:
  tr_path : data/ieee-RUL/Learning_set.csv
  val_path : data/ieee-RUL/Full_Test_Set.csv
  tst_path : data/ieee-RUL/Full_Test_Set.csv
  BATCH_SIZE: ${training_params.BATCH_SIZE}
  num_workers: 4
  sensor_idx : ${sensor_id}
  train_bearings_names: [Bearing1_1, Bearing2_1, Bearing3_1, Bearing3_2, Bearing2_2, Bearing1_2]
  val_bearings_names: [Bearing2_3, Bearing2_5, Bearing1_4, Bearing1_6]
  test_bearings_names: [Bearing1_3, Bearing1_5, Bearing1_7, Bearing2_4, Bearing2_6, Bearing2_7, Bearing3_3, Bearing3_4, Bearing3_5, Bearing3_6, Bearing3_7]


denoisingAE_params : 
  sensor_id : ${sensor_id}
  lr : ${training_params.denoisingAE_lr}
  apply_timeEmbedding : False

  time_embedder_params : 
    embedding_dim : ${seq_len}
    hidden_dims : [128, 256]
    output_dim : 128
  
  encoder_params : 
    in_channels : 1
    seq_len : ${seq_len}
    conv_channels : [32, 64, 128 ,256]
    kernel_sizes : [3 ,3 ,3, 3]
    pool_sizes: [2, 2, 2, 2]
    activation_name : ${training_params.activation_name}
  decoder_params :
    final_conv_channels: 64
    conv_channels: [1, 32, 64, 128]
    kernel_sizes: [3, 3, 3,3]
    pool_sizes: [2, 2, 2, 2]
    out_channels: 1
    activation_name: ${training_params.activation_name}

sparseAE_params : 
  sensor_id : ${sensor_id}
  lr : ${training_params.sparseAE_lr}
  input_dim : 32
  sparsity_lambda : 0.005
  momentum : 0.7
  out_dim : 32
  sparse_hidden_dim : 128

DenoisingSparseAE_params : 
  sensor_id : ${sensor_id}
  denoisingAE_params : ${denoisingAE_params}
  sparseAE_params : ${sparseAE_params}  

  


